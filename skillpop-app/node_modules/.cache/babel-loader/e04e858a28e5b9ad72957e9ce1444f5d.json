{"ast":null,"code":"const call = require('../../utils/call');\n\nconst _require = require('skillpop-util'),\n      validate = _require.validate,\n      _require$errors = _require.errors,\n      ConflictError = _require$errors.ConflictError,\n      NotFoundError = _require$errors.NotFoundError; // const { env: { REACT_APP_API_URL: API_URL } } = process\n\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nmodule.exports = function (token, name, surname, city, address) {\n  validate.string(token);\n  validate.string.notVoid('token', token);\n\n  if (title) {\n    validate.string(name);\n    validate.string.notVoid('name', name);\n  }\n\n  if (surname) {\n    validate.string(surname);\n    validate.string.notVoid('surname', surname);\n  }\n\n  if (city) {\n    validate.string(city);\n    validate.string.notVoid('city', city);\n  }\n\n  if (city) {\n    validate.string(address);\n    validate.string.notVoid('address', address);\n  }\n\n  return (async () => {\n    const res = await call(`${API_URL}/users`, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        surname,\n        city,\n        address\n      })\n    });\n    if (res.status === 200) return;\n    if (res.status === 404) throw new NotFoundError(JSON.parse(res.body).message);\n    if (res.status === 409) throw new ConflictError(JSON.parse(res.body).message);\n    throw new Error(JSON.parse(res.body).message);\n  })();\n};","map":{"version":3,"sources":["C:/Users/xavie/bootcamp/collab/skylab-bootcamp-201909/staff/javier-sevilla/skillpop/skillpop-app/src/logic/modify-user/index.js"],"names":["call","require","validate","errors","ConflictError","NotFoundError","API_URL","process","env","REACT_APP_API_URL","module","exports","token","name","surname","city","address","string","notVoid","title","res","method","headers","Authorization","body","JSON","stringify","status","parse","message","Error"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;iBAC+DA,OAAO,CAAC,eAAD,C;MAA9DC,Q,YAAAA,Q;iCAAUC,M;MAAUC,a,mBAAAA,a;MAAeC,a,mBAAAA,a,EAC3C;;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,IAAjB,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAsCC,OAAtC,EAA+C;AAC5Dd,EAAAA,QAAQ,CAACe,MAAT,CAAgBL,KAAhB;AACAV,EAAAA,QAAQ,CAACe,MAAT,CAAgBC,OAAhB,CAAwB,OAAxB,EAAiCN,KAAjC;;AAEA,MAAIO,KAAJ,EAAW;AACPjB,IAAAA,QAAQ,CAACe,MAAT,CAAgBJ,IAAhB;AACAX,IAAAA,QAAQ,CAACe,MAAT,CAAgBC,OAAhB,CAAwB,MAAxB,EAAgCL,IAAhC;AACH;;AACD,MAAIC,OAAJ,EAAa;AACTZ,IAAAA,QAAQ,CAACe,MAAT,CAAgBH,OAAhB;AACAZ,IAAAA,QAAQ,CAACe,MAAT,CAAgBC,OAAhB,CAAwB,SAAxB,EAAmCJ,OAAnC;AAEH;;AAED,MAAIC,IAAJ,EAAU;AACNb,IAAAA,QAAQ,CAACe,MAAT,CAAgBF,IAAhB;AACAb,IAAAA,QAAQ,CAACe,MAAT,CAAgBC,OAAhB,CAAwB,MAAxB,EAAgCH,IAAhC;AACH;;AAED,MAAIA,IAAJ,EAAU;AACNb,IAAAA,QAAQ,CAACe,MAAT,CAAgBD,OAAhB;AACAd,IAAAA,QAAQ,CAACe,MAAT,CAAgBC,OAAhB,CAAwB,SAAxB,EAAmCF,OAAnC;AACH;;AAED,SAAO,CAAC,YAAY;AAChB,UAAMI,GAAG,GAAG,MAAMpB,IAAI,CAAE,GAAEM,OAAQ,QAAZ,EAAqB;AACvCe,MAAAA,MAAM,EAAE,OAD+B;AAEvCC,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASX,KAAM,EAD1B;AAEL,wBAAgB;AAFX,OAF8B;AAMvCY,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEb,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBC,QAAAA,IAAjB;AAAuBC,QAAAA;AAAvB,OAAf;AANiC,KAArB,CAAtB;AASA,QAAII,GAAG,CAACO,MAAJ,KAAe,GAAnB,EAAwB;AAExB,QAAIP,GAAG,CAACO,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAItB,aAAJ,CAAkBoB,IAAI,CAACG,KAAL,CAAWR,GAAG,CAACI,IAAf,EAAqBK,OAAvC,CAAN;AAExB,QAAIT,GAAG,CAACO,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAIvB,aAAJ,CAAkBqB,IAAI,CAACG,KAAL,CAAWR,GAAG,CAACI,IAAf,EAAqBK,OAAvC,CAAN;AAExB,UAAM,IAAIC,KAAJ,CAAUL,IAAI,CAACG,KAAL,CAAWR,GAAG,CAACI,IAAf,EAAqBK,OAA/B,CAAN;AACH,GAjBM,GAAP;AAkBH,CA1CD","sourcesContent":["const call = require('../../utils/call')\r\nconst { validate, errors: { ConflictError, NotFoundError } } = require('skillpop-util')\r\n// const { env: { REACT_APP_API_URL: API_URL } } = process\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nmodule.exports = function (token, name, surname, city, address) {\r\n    validate.string(token)\r\n    validate.string.notVoid('token', token)\r\n\r\n    if (title) {\r\n        validate.string(name)\r\n        validate.string.notVoid('name', name)\r\n    }\r\n    if (surname) {\r\n        validate.string(surname)\r\n        validate.string.notVoid('surname', surname)\r\n\r\n    }\r\n\r\n    if (city) {\r\n        validate.string(city)\r\n        validate.string.notVoid('city', city)\r\n    }\r\n\r\n    if (city) {\r\n        validate.string(address)\r\n        validate.string.notVoid('address', address)\r\n    }\r\n    \r\n    return (async () => {\r\n        const res = await call(`${API_URL}/users`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ name, surname, city, address })\r\n        })\r\n\r\n        if (res.status === 200) return\r\n\r\n        if (res.status === 404) throw new NotFoundError(JSON.parse(res.body).message)\r\n        \r\n        if (res.status === 409) throw new ConflictError(JSON.parse(res.body).message)\r\n\r\n        throw new Error(JSON.parse(res.body).message)\r\n    })()\r\n}"]},"metadata":{},"sourceType":"module"}