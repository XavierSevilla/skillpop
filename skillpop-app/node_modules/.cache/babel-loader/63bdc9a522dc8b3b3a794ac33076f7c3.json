{"ast":null,"code":"module.exports = function (url, {\n  method = 'GET',\n  headers,\n  body\n} = {}) {\n  return new Promise((resolve, reject) => {\n    try {\n      var xhr = new XMLHttpRequest();\n      xhr.open(method, url);\n\n      xhr.onreadystatechange = function () {\n        if (this.readyState == 4) {\n          if (this.status === 0) {\n            reject(new Error(`fail to call ${url}`));\n          } else {\n            const response = {\n              status: this.status,\n              body: this.responseText\n            };\n            resolve(response);\n          }\n        }\n      }; // xhr.onerror = function (error) {\n      //     reject(error)\n      // }\n\n\n      if (headers) for (let key in headers) xhr.setRequestHeader(key, headers[key]);\n      body ? xhr.send(body) : xhr.send();\n    } catch (error) {\n      debugger;\n      reject(error);\n    }\n  });\n};","map":{"version":3,"sources":["C:/Users/xavie/bootcamp/collab/skylab-bootcamp-201909/staff/javier-sevilla/skillpop/skillpop-app/src/utils/call.js"],"names":["module","exports","url","method","headers","body","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","Error","response","responseText","key","setRequestHeader","send","error"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,GAAV,EAAe;AAAEC,EAAAA,MAAM,GAAG,KAAX;AAAkBC,EAAAA,OAAlB;AAA2BC,EAAAA;AAA3B,IAAoC,EAAnD,EAAuD;AACpE,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAI;AACA,UAAIC,GAAG,GAAG,IAAIC,cAAJ,EAAV;AAEAD,MAAAA,GAAG,CAACE,IAAJ,CAASR,MAAT,EAAiBD,GAAjB;;AAEAO,MAAAA,GAAG,CAACG,kBAAJ,GAAyB,YAAY;AACjC,YAAI,KAAKC,UAAL,IAAmB,CAAvB,EAA0B;AACtB,cAAI,KAAKC,MAAL,KAAgB,CAApB,EAAuB;AAEnBN,YAAAA,MAAM,CAAC,IAAIO,KAAJ,CAAW,gBAAeb,GAAI,EAA9B,CAAD,CAAN;AACH,WAHD,MAGO;AACH,kBAAMc,QAAQ,GAAG;AACbF,cAAAA,MAAM,EAAE,KAAKA,MADA;AAEbT,cAAAA,IAAI,EAAE,KAAKY;AAFE,aAAjB;AAKAV,YAAAA,OAAO,CAACS,QAAD,CAAP;AACH;AACJ;AACJ,OAdD,CALA,CAqBA;AACA;AACA;;;AAEA,UAAIZ,OAAJ,EACI,KAAK,IAAIc,GAAT,IAAgBd,OAAhB,EACIK,GAAG,CAACU,gBAAJ,CAAqBD,GAArB,EAA0Bd,OAAO,CAACc,GAAD,CAAjC;AAERb,MAAAA,IAAI,GAAGI,GAAG,CAACW,IAAJ,CAASf,IAAT,CAAH,GAAoBI,GAAG,CAACW,IAAJ,EAAxB;AACH,KA9BD,CA8BE,OAAOC,KAAP,EAAc;AACZ;AACAb,MAAAA,MAAM,CAACa,KAAD,CAAN;AACH;AACJ,GAnCM,CAAP;AAoCH,CArCD","sourcesContent":["module.exports = function (url, { method = 'GET', headers, body } = {}) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            var xhr = new XMLHttpRequest\r\n\r\n            xhr.open(method, url)\r\n\r\n            xhr.onreadystatechange = function () {\r\n                if (this.readyState == 4) {\r\n                    if (this.status === 0) {\r\n\r\n                        reject(new Error(`fail to call ${url}`))\r\n                    } else {\r\n                        const response = {\r\n                            status: this.status,\r\n                            body: this.responseText\r\n                        }\r\n\r\n                        resolve(response)\r\n                    }\r\n                }\r\n            }\r\n\r\n            // xhr.onerror = function (error) {\r\n            //     reject(error)\r\n            // }\r\n\r\n            if (headers)\r\n                for (let key in headers)\r\n                    xhr.setRequestHeader(key, headers[key])\r\n\r\n            body ? xhr.send(body) : xhr.send()\r\n        } catch (error) {\r\n            debugger\r\n            reject(error)\r\n        }\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}