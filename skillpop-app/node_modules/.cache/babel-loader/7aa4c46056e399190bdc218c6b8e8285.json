{"ast":null,"code":"const call = require('../../utils/call');\n\nconst _require = require('skillpop-util'),\n      validate = _require.validate,\n      _require$errors = _require.errors,\n      ConflictError = _require$errors.ConflictError,\n      NotFoundError = _require$errors.NotFoundError,\n      CredentialsError = _require$errors.CredentialsError; // const { env: { REACT_APP_API_URL: API_URL } } = process\n\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nmodule.exports = function (token, idAd, title, description, price) {\n  validate.string(token);\n  validate.string.notVoid('token', token);\n  validate.string(idAd);\n  validate.string.notVoid('idAd', idAd);\n\n  if (title) {\n    validate.string(title);\n    validate.string.notVoid('title', title);\n  }\n\n  if (description) {\n    validate.string(description);\n    validate.string.notVoid('description', description);\n  }\n\n  if (price) {\n    validate.number(price);\n  }\n\n  return (async () => {\n    const res = await call(`${API_URL}/ads/${idAd}`, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        price\n      })\n    });\n    if (res.status === 200) return;\n    if (res.status === 401) throw new CredentialsError(JSON.parse(res.body).message);\n    if (res.status === 404) throw new NotFoundError(JSON.parse(res.body).message);\n    if (res.status === 409) throw new ConflictError(JSON.parse(res.body).message);\n    throw new Error(JSON.parse(res.body).message);\n  })();\n};","map":{"version":3,"sources":["C:/Users/xavie/bootcamp/collab/skylab-bootcamp-201909/staff/javier-sevilla/skillpop/skillpop-app/src/logic/modify-ad/index.js"],"names":["call","require","validate","errors","ConflictError","NotFoundError","CredentialsError","API_URL","process","env","REACT_APP_API_URL","module","exports","token","idAd","title","description","price","string","notVoid","number","res","method","headers","Authorization","body","JSON","stringify","status","parse","message","Error"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;iBACiFA,OAAO,CAAC,eAAD,C;MAAhFC,Q,YAAAA,Q;iCAAUC,M;MAAUC,a,mBAAAA,a;MAAeC,a,mBAAAA,a;MAAeC,gB,mBAAAA,gB,EAC1D;;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,IAAjB,EAAuBC,KAAvB,EAA8BC,WAA9B,EAA2CC,KAA3C,EAAkD;AAC/Df,EAAAA,QAAQ,CAACgB,MAAT,CAAgBL,KAAhB;AACAX,EAAAA,QAAQ,CAACgB,MAAT,CAAgBC,OAAhB,CAAwB,OAAxB,EAAiCN,KAAjC;AACAX,EAAAA,QAAQ,CAACgB,MAAT,CAAgBJ,IAAhB;AACAZ,EAAAA,QAAQ,CAACgB,MAAT,CAAgBC,OAAhB,CAAwB,MAAxB,EAAgCL,IAAhC;;AACA,MAAIC,KAAJ,EAAW;AACPb,IAAAA,QAAQ,CAACgB,MAAT,CAAgBH,KAAhB;AACAb,IAAAA,QAAQ,CAACgB,MAAT,CAAgBC,OAAhB,CAAwB,OAAxB,EAAiCJ,KAAjC;AACH;;AACD,MAAIC,WAAJ,EAAiB;AACbd,IAAAA,QAAQ,CAACgB,MAAT,CAAgBF,WAAhB;AACAd,IAAAA,QAAQ,CAACgB,MAAT,CAAgBC,OAAhB,CAAwB,aAAxB,EAAuCH,WAAvC;AACH;;AACD,MAAIC,KAAJ,EAAW;AACPf,IAAAA,QAAQ,CAACkB,MAAT,CAAgBH,KAAhB;AACH;;AAED,SAAO,CAAC,YAAY;AAChB,UAAMI,GAAG,GAAG,MAAMrB,IAAI,CAAE,GAAEO,OAAQ,QAAOO,IAAK,EAAxB,EAA2B;AAC7CQ,MAAAA,MAAM,EAAE,OADqC;AAE7CC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASX,KAAM;AAAjC,OAFoC;AAG7CY,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEZ,QAAAA,KAAF;AAASC,QAAAA,WAAT;AAAsBC,QAAAA;AAAtB,OAAf;AAHuC,KAA3B,CAAtB;AAMA,QAAII,GAAG,CAACO,MAAJ,KAAe,GAAnB,EAAwB;AAExB,QAAIP,GAAG,CAACO,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAItB,gBAAJ,CAAqBoB,IAAI,CAACG,KAAL,CAAWR,GAAG,CAACI,IAAf,EAAqBK,OAA1C,CAAN;AAExB,QAAIT,GAAG,CAACO,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAIvB,aAAJ,CAAkBqB,IAAI,CAACG,KAAL,CAAWR,GAAG,CAACI,IAAf,EAAqBK,OAAvC,CAAN;AAExB,QAAIT,GAAG,CAACO,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAIxB,aAAJ,CAAkBsB,IAAI,CAACG,KAAL,CAAWR,GAAG,CAACI,IAAf,EAAqBK,OAAvC,CAAN;AAExB,UAAM,IAAIC,KAAJ,CAAUL,IAAI,CAACG,KAAL,CAAWR,GAAG,CAACI,IAAf,EAAqBK,OAA/B,CAAN;AACH,GAhBM,GAAP;AAiBH,CAlCD","sourcesContent":["const call = require('../../utils/call')\r\nconst { validate, errors: { ConflictError, NotFoundError, CredentialsError } } = require('skillpop-util')\r\n// const { env: { REACT_APP_API_URL: API_URL } } = process\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nmodule.exports = function (token, idAd, title, description, price) {\r\n    validate.string(token)\r\n    validate.string.notVoid('token', token)\r\n    validate.string(idAd)\r\n    validate.string.notVoid('idAd', idAd)\r\n    if (title) {\r\n        validate.string(title)\r\n        validate.string.notVoid('title', title)\r\n    }\r\n    if (description) {\r\n        validate.string(description)\r\n        validate.string.notVoid('description', description)\r\n    }\r\n    if (price) {\r\n        validate.number(price)\r\n    }\r\n\r\n    return (async () => {\r\n        const res = await call(`${API_URL}/ads/${idAd}`, {\r\n            method: 'PATCH',\r\n            headers: { Authorization: `Bearer ${token}` },\r\n            body: JSON.stringify({ title, description, price })\r\n        })\r\n\r\n        if (res.status === 200) return\r\n\r\n        if (res.status === 401) throw new CredentialsError(JSON.parse(res.body).message)\r\n\r\n        if (res.status === 404) throw new NotFoundError(JSON.parse(res.body).message)\r\n\r\n        if (res.status === 409) throw new ConflictError(JSON.parse(res.body).message)\r\n\r\n        throw new Error(JSON.parse(res.body).message)\r\n    })()\r\n}"]},"metadata":{},"sourceType":"module"}