{"ast":null,"code":"const call = require('../../utils/call');\n\nconst _require = require('skillpop-util'),\n      validate = _require.validate,\n      _require$errors = _require.errors,\n      NotFoundError = _require$errors.NotFoundError,\n      CredentialsError = _require$errors.CredentialsError; // const { env: { REACT_APP_API_URL: API_URL } } = process\n\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nmodule.exports = function (token, chatId) {\n  validate.string(token);\n  validate.string.notVoid('token', token);\n  validate.string(chatId);\n  validate.string.notVoid('chatId', chatId);\n  return (async () => {\n    const res = await call(`${API_URL}/chats/${chatId}`, {\n      method: 'GET',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n\n    if (res.status === 200) {\n      const chat = JSON.parse(res.body);\n      chat.date = new Date(chats.date);\n      chat.lastAccess = new Date(chats.lastAccess);\n      return chat;\n    }\n\n    if (res.status === 401) throw new CredentialsError(JSON.parse(res.body).message);\n    if (res.status === 404) throw new NotFoundError(JSON.parse(res.body).message);\n    throw new Error(JSON.parse(res.body).message);\n  })();\n};","map":{"version":3,"sources":["C:/Users/xavie/bootcamp/collab/skylab-bootcamp-201909/staff/javier-sevilla/skillpop/skillpop-app/src/logic/retrieve-chat/index.js"],"names":["call","require","validate","errors","NotFoundError","CredentialsError","API_URL","process","env","REACT_APP_API_URL","module","exports","token","chatId","string","notVoid","res","method","headers","Authorization","status","chat","JSON","parse","body","date","Date","chats","lastAccess","message","Error"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;iBACkEA,OAAO,CAAC,eAAD,C;MAAjEC,Q,YAAAA,Q;iCAAUC,M;MAAUC,a,mBAAAA,a;MAAeC,gB,mBAAAA,gB,EAC3C;;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACtCX,EAAAA,QAAQ,CAACY,MAAT,CAAgBF,KAAhB;AACAV,EAAAA,QAAQ,CAACY,MAAT,CAAgBC,OAAhB,CAAwB,OAAxB,EAAiCH,KAAjC;AAEAV,EAAAA,QAAQ,CAACY,MAAT,CAAgBD,MAAhB;AACAX,EAAAA,QAAQ,CAACY,MAAT,CAAgBC,OAAhB,CAAwB,QAAxB,EAAkCF,MAAlC;AAEA,SAAO,CAAC,YAAY;AAChB,UAAMG,GAAG,GAAG,MAAMhB,IAAI,CAAE,GAAEM,OAAQ,UAASO,MAAO,EAA5B,EAA+B;AACjDI,MAAAA,MAAM,EAAE,KADyC;AAEjDC,MAAAA,OAAO,EAAE;AAAEC,QAAAA,aAAa,EAAG,UAASP,KAAM;AAAjC;AAFwC,KAA/B,CAAtB;;AAKA,QAAII,GAAG,CAACI,MAAJ,KAAe,GAAnB,EAAwB;AACpB,YAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACQ,IAAf,CAAb;AAEAH,MAAAA,IAAI,CAACI,IAAL,GAAY,IAAIC,IAAJ,CAASC,KAAK,CAACF,IAAf,CAAZ;AAEAJ,MAAAA,IAAI,CAACO,UAAL,GAAkB,IAAIF,IAAJ,CAASC,KAAK,CAACC,UAAf,CAAlB;AAGA,aAAOP,IAAP;AACH;;AAED,QAAIL,GAAG,CAACI,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAIf,gBAAJ,CAAqBiB,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACQ,IAAf,EAAqBK,OAA1C,CAAN;AAExB,QAAIb,GAAG,CAACI,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAIhB,aAAJ,CAAkBkB,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACQ,IAAf,EAAqBK,OAAvC,CAAN;AAExB,UAAM,IAAIC,KAAJ,CAAUR,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACQ,IAAf,EAAqBK,OAA/B,CAAN;AACH,GAtBM,GAAP;AAuBH,CA9BD","sourcesContent":["const call = require('../../utils/call')\r\nconst { validate, errors: { NotFoundError, CredentialsError } } = require('skillpop-util')\r\n// const { env: { REACT_APP_API_URL: API_URL } } = process\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nmodule.exports = function (token, chatId) {\r\n    validate.string(token)\r\n    validate.string.notVoid('token', token)\r\n\r\n    validate.string(chatId)\r\n    validate.string.notVoid('chatId', chatId)\r\n\r\n    return (async () => {\r\n        const res = await call(`${API_URL}/chats/${chatId}`, {\r\n            method: 'GET',\r\n            headers: { Authorization: `Bearer ${token}` }\r\n        })\r\n\r\n        if (res.status === 200) {\r\n            const chat = JSON.parse(res.body)\r\n\r\n            chat.date = new Date(chats.date)\r\n\r\n            chat.lastAccess = new Date(chats.lastAccess)\r\n\r\n\r\n            return chat\r\n        }\r\n\r\n        if (res.status === 401) throw new CredentialsError(JSON.parse(res.body).message)\r\n        \r\n        if (res.status === 404) throw new NotFoundError(JSON.parse(res.body).message)\r\n\r\n        throw new Error(JSON.parse(res.body).message)\r\n    })()\r\n}"]},"metadata":{},"sourceType":"module"}