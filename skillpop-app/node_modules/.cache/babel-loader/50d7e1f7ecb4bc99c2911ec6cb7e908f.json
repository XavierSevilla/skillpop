{"ast":null,"code":"const call = require('../../utils/call');\n\nconst _require = require('skillpop-util'),\n      validate = _require.validate,\n      _require$errors = _require.errors,\n      NotFoundError = _require$errors.NotFoundError,\n      CredentialsError = _require$errors.CredentialsError; // const { env: { REACT_APP_API_URL: API_URL } } = process\n\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nmodule.exports = function (token, id, body) {\n  validate.string(token);\n  validate.string.notVoid('token', token);\n  validate.string(id);\n  validate.string.notVoid('id', id);\n  validate.string(body);\n  validate.string.notVoid('body', body);\n  return (async () => {\n    const res = await call(`${API_URL}/users/comment/${id}`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        body\n      })\n    });\n    debugger;\n    if (res.status === 201) return JSON.parse(res.body).id;\n    if (res.status === 401) throw new CredentialsError(JSON.parse(res.body).message);\n    if (res.status === 404) throw new NotFoundError(JSON.parse(res.body).message);\n    throw new Error(JSON.parse(res.body).message);\n  })();\n};","map":{"version":3,"sources":["C:/Users/xavie/bootcamp/collab/skylab-bootcamp-201909/staff/javier-sevilla/skillpop/skillpop-app/src/logic/add-comment/index.js"],"names":["call","require","validate","errors","NotFoundError","CredentialsError","API_URL","process","env","REACT_APP_API_URL","module","exports","token","id","body","string","notVoid","res","method","headers","JSON","stringify","status","parse","message","Error"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;iBACkEA,OAAO,CAAC,eAAD,C;MAAjEC,Q,YAAAA,Q;iCAAUC,M;MAAUC,a,mBAAAA,a;MAAeC,gB,mBAAAA,gB,EAC3C;;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,EAAjB,EAAqBC,IAArB,EAA2B;AACxCZ,EAAAA,QAAQ,CAACa,MAAT,CAAgBH,KAAhB;AACAV,EAAAA,QAAQ,CAACa,MAAT,CAAgBC,OAAhB,CAAwB,OAAxB,EAAiCJ,KAAjC;AACAV,EAAAA,QAAQ,CAACa,MAAT,CAAgBF,EAAhB;AACAX,EAAAA,QAAQ,CAACa,MAAT,CAAgBC,OAAhB,CAAwB,IAAxB,EAA8BH,EAA9B;AACAX,EAAAA,QAAQ,CAACa,MAAT,CAAgBD,IAAhB;AACAZ,EAAAA,QAAQ,CAACa,MAAT,CAAgBC,OAAhB,CAAwB,MAAxB,EAAgCF,IAAhC;AAEA,SAAO,CAAC,YAAY;AAChB,UAAMG,GAAG,GAAG,MAAMjB,IAAI,CAAE,GAAEM,OAAQ,kBAAiBO,EAAG,EAAhC,EAAmC;AACrDK,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,OAAO,EAAE;AACL,yBAAkB,UAASP,KAAM,EAD5B;AAEL,wBAAgB;AAFX,OAF4C;AAMrDE,MAAAA,IAAI,EAAEM,IAAI,CAACC,SAAL,CAAe;AAAEP,QAAAA;AAAF,OAAf;AAN+C,KAAnC,CAAtB;AASA;AAEA,QAAIG,GAAG,CAACK,MAAJ,KAAe,GAAnB,EAAwB,OAAOF,IAAI,CAACG,KAAL,CAAWN,GAAG,CAACH,IAAf,EAAqBD,EAA5B;AAExB,QAAII,GAAG,CAACK,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAIjB,gBAAJ,CAAqBe,IAAI,CAACG,KAAL,CAAWN,GAAG,CAACH,IAAf,EAAqBU,OAA1C,CAAN;AAExB,QAAIP,GAAG,CAACK,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAIlB,aAAJ,CAAkBgB,IAAI,CAACG,KAAL,CAAWN,GAAG,CAACH,IAAf,EAAqBU,OAAvC,CAAN;AAExB,UAAM,IAAIC,KAAJ,CAAUL,IAAI,CAACG,KAAL,CAAWN,GAAG,CAACH,IAAf,EAAqBU,OAA/B,CAAN;AACH,GAnBM,GAAP;AAoBH,CA5BD","sourcesContent":["const call = require('../../utils/call')\r\nconst { validate, errors: { NotFoundError, CredentialsError } } = require('skillpop-util')\r\n// const { env: { REACT_APP_API_URL: API_URL } } = process\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nmodule.exports = function (token, id, body) {\r\n    validate.string(token)\r\n    validate.string.notVoid('token', token)\r\n    validate.string(id)\r\n    validate.string.notVoid('id', id)\r\n    validate.string(body)\r\n    validate.string.notVoid('body', body)\r\n\r\n    return (async () => {\r\n        const res = await call(`${API_URL}/users/comment/${id}`, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ body })\r\n        })\r\n\r\n        debugger\r\n\r\n        if (res.status === 201) return JSON.parse(res.body).id\r\n\r\n        if (res.status === 401) throw new CredentialsError(JSON.parse(res.body).message)\r\n        \r\n        if (res.status === 404) throw new NotFoundError(JSON.parse(res.body).message)\r\n\r\n        throw new Error(JSON.parse(res.body).message)\r\n    })()\r\n}"]},"metadata":{},"sourceType":"module"}