{"ast":null,"code":"const call = require('../../utils/call');\n\nconst _require = require('tasks-util'),\n      validate = _require.validate,\n      _require$errors = _require.errors,\n      CredentialsError = _require$errors.CredentialsError,\n      NotFoundError = _require$errors.NotFoundError,\n      ConflictError = _require$errors.ConflictError; // const { env: { REACT_APP_API_URL: API_URL } } = process\n\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nmodule.exports = function (token, taskId, title, description, status) {\n  validate.string(token);\n  validate.string.notVoid('token', token);\n  validate.string(taskId);\n  validate.string.notVoid('task id', taskId);\n\n  if (title) {\n    validate.string(title);\n    validate.string.notVoid('title', title);\n  }\n\n  if (description) {\n    validate.string(description);\n    validate.string.notVoid('description', description);\n  }\n\n  if (status) {\n    validate.string(status);\n    validate.string.notVoid('status', status);\n    validate.matches('status', status, 'TODO', 'DOING', 'REVIEW', 'DONE');\n  }\n\n  return (async () => {\n    const res = await call(`${API_URL}/tasks/${taskId}`, {\n      method: 'PATCH',\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        status\n      })\n    });\n    if (res.status === 200) return;\n    if (res.status === 401) throw new CredentialsError(JSON.parse(res.body).message);\n    if (res.status === 404) throw new NotFoundError(JSON.parse(res.body).message);\n    if (res.status === 409) throw new ConflictError(JSON.parse(res.body).message);\n    throw new Error(JSON.parse(res.body).message);\n  })();\n};","map":{"version":3,"sources":["C:/Users/xavie/bootcamp/collab/skylab-bootcamp-201909/staff/javier-sevilla/skillpop/skillpop-app/src/logic/modify-task/index.js"],"names":["call","require","validate","errors","CredentialsError","NotFoundError","ConflictError","API_URL","process","env","REACT_APP_API_URL","module","exports","token","taskId","title","description","status","string","notVoid","matches","res","method","headers","Authorization","body","JSON","stringify","parse","message","Error"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;iBACiFA,OAAO,CAAC,YAAD,C;MAAhFC,Q,YAAAA,Q;iCAAUC,M;MAAUC,gB,mBAAAA,gB;MAAkBC,a,mBAAAA,a;MAAeC,a,mBAAAA,a,EAC7D;;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,MAAjB,EAAyBC,KAAzB,EAAgCC,WAAhC,EAA6CC,MAA7C,EAAqD;AAClEf,EAAAA,QAAQ,CAACgB,MAAT,CAAgBL,KAAhB;AACAX,EAAAA,QAAQ,CAACgB,MAAT,CAAgBC,OAAhB,CAAwB,OAAxB,EAAiCN,KAAjC;AAEAX,EAAAA,QAAQ,CAACgB,MAAT,CAAgBJ,MAAhB;AACAZ,EAAAA,QAAQ,CAACgB,MAAT,CAAgBC,OAAhB,CAAwB,SAAxB,EAAmCL,MAAnC;;AAEA,MAAIC,KAAJ,EAAW;AACPb,IAAAA,QAAQ,CAACgB,MAAT,CAAgBH,KAAhB;AACAb,IAAAA,QAAQ,CAACgB,MAAT,CAAgBC,OAAhB,CAAwB,OAAxB,EAAiCJ,KAAjC;AACH;;AACD,MAAIC,WAAJ,EAAiB;AACbd,IAAAA,QAAQ,CAACgB,MAAT,CAAgBF,WAAhB;AACAd,IAAAA,QAAQ,CAACgB,MAAT,CAAgBC,OAAhB,CAAwB,aAAxB,EAAuCH,WAAvC;AACH;;AACD,MAAIC,MAAJ,EAAY;AACRf,IAAAA,QAAQ,CAACgB,MAAT,CAAgBD,MAAhB;AACAf,IAAAA,QAAQ,CAACgB,MAAT,CAAgBC,OAAhB,CAAwB,QAAxB,EAAkCF,MAAlC;AACAf,IAAAA,QAAQ,CAACkB,OAAT,CAAiB,QAAjB,EAA2BH,MAA3B,EAAmC,MAAnC,EAA2C,OAA3C,EAAoD,QAApD,EAA8D,MAA9D;AACH;;AAED,SAAO,CAAC,YAAY;AAChB,UAAMI,GAAG,GAAG,MAAMrB,IAAI,CAAE,GAAEO,OAAQ,UAASO,MAAO,EAA5B,EAA+B;AACjDQ,MAAAA,MAAM,EAAE,OADyC;AAEjDC,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,EAAG,UAASX,KAAM,EAD1B;AAEL,wBAAgB;AAFX,OAFwC;AAMjDY,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEZ,QAAAA,KAAF;AAASC,QAAAA,WAAT;AAAsBC,QAAAA;AAAtB,OAAf;AAN2C,KAA/B,CAAtB;AASA,QAAII,GAAG,CAACJ,MAAJ,KAAe,GAAnB,EAAwB;AAExB,QAAII,GAAG,CAACJ,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAIb,gBAAJ,CAAqBsB,IAAI,CAACE,KAAL,CAAWP,GAAG,CAACI,IAAf,EAAqBI,OAA1C,CAAN;AAExB,QAAIR,GAAG,CAACJ,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAIZ,aAAJ,CAAkBqB,IAAI,CAACE,KAAL,CAAWP,GAAG,CAACI,IAAf,EAAqBI,OAAvC,CAAN;AAExB,QAAIR,GAAG,CAACJ,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAIX,aAAJ,CAAkBoB,IAAI,CAACE,KAAL,CAAWP,GAAG,CAACI,IAAf,EAAqBI,OAAvC,CAAN;AAExB,UAAM,IAAIC,KAAJ,CAAUJ,IAAI,CAACE,KAAL,CAAWP,GAAG,CAACI,IAAf,EAAqBI,OAA/B,CAAN;AACH,GAnBM,GAAP;AAoBH,CAzCD","sourcesContent":["const call = require('../../utils/call')\r\nconst { validate, errors: { CredentialsError, NotFoundError, ConflictError } } = require('tasks-util')\r\n// const { env: { REACT_APP_API_URL: API_URL } } = process\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nmodule.exports = function (token, taskId, title, description, status) {\r\n    validate.string(token)\r\n    validate.string.notVoid('token', token)\r\n\r\n    validate.string(taskId)\r\n    validate.string.notVoid('task id', taskId)\r\n\r\n    if (title) {\r\n        validate.string(title)\r\n        validate.string.notVoid('title', title)\r\n    }\r\n    if (description) {\r\n        validate.string(description)\r\n        validate.string.notVoid('description', description)\r\n    }\r\n    if (status) {\r\n        validate.string(status)\r\n        validate.string.notVoid('status', status)\r\n        validate.matches('status', status, 'TODO', 'DOING', 'REVIEW', 'DONE')\r\n    }\r\n\r\n    return (async () => {\r\n        const res = await call(`${API_URL}/tasks/${taskId}`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n                Authorization: `Bearer ${token}`,\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({ title, description, status })\r\n        })\r\n\r\n        if (res.status === 200) return\r\n\r\n        if (res.status === 401) throw new CredentialsError(JSON.parse(res.body).message)\r\n\r\n        if (res.status === 404) throw new NotFoundError(JSON.parse(res.body).message)\r\n\r\n        if (res.status === 409) throw new ConflictError(JSON.parse(res.body).message)\r\n\r\n        throw new Error(JSON.parse(res.body).message)\r\n    })()\r\n}\r\n"]},"metadata":{},"sourceType":"module"}