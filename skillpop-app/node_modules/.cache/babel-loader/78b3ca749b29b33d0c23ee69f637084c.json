{"ast":null,"code":"const call = require('../../utils/call');\n\nconst _require = require('tasks-util'),\n      validate = _require.validate,\n      ConflictError = _require.errors.ConflictError; // const { env: { REACT_APP_API_URL: API_URL } } = process\n\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nmodule.exports = function (name, surname, email, username, password) {\n  validate.string(name);\n  validate.string.notVoid('name', name);\n  validate.string(surname);\n  validate.string.notVoid('surname', surname);\n  validate.string(email);\n  validate.string.notVoid('e-mail', email);\n  validate.email(email);\n  validate.string(username);\n  validate.string.notVoid('username', username);\n  validate.string(password);\n  validate.string.notVoid('password', password);\n  return (async () => {\n    const res = await call(`${API_URL}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name,\n        surname,\n        email,\n        username,\n        password\n      })\n    });\n    if (res.status === 201) return;\n    if (res.status === 409) throw new ConflictError(JSON.parse(res.body).message);\n    throw new Error(JSON.parse(res.body).message);\n  })();\n};","map":{"version":3,"sources":["C:/Users/xavie/bootcamp/collab/skylab-bootcamp-201909/staff/javier-sevilla/skillpop/skillpop-app/src/logic/register-user/index.js"],"names":["call","require","validate","ConflictError","errors","API_URL","process","env","REACT_APP_API_URL","module","exports","name","surname","email","username","password","string","notVoid","res","method","headers","body","JSON","stringify","status","parse","message","Error"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,kBAAD,CAApB;;iBACgDA,OAAO,CAAC,YAAD,C;MAA/CC,Q,YAAAA,Q;MAAoBC,a,YAAVC,M,CAAUD,a,EAC5B;;;AACA,MAAME,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,iBAA5B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,OAAhB,EAAyBC,KAAzB,EAAgCC,QAAhC,EAA0CC,QAA1C,EAAoD;AACjEb,EAAAA,QAAQ,CAACc,MAAT,CAAgBL,IAAhB;AACAT,EAAAA,QAAQ,CAACc,MAAT,CAAgBC,OAAhB,CAAwB,MAAxB,EAAgCN,IAAhC;AACAT,EAAAA,QAAQ,CAACc,MAAT,CAAgBJ,OAAhB;AACAV,EAAAA,QAAQ,CAACc,MAAT,CAAgBC,OAAhB,CAAwB,SAAxB,EAAmCL,OAAnC;AACAV,EAAAA,QAAQ,CAACc,MAAT,CAAgBH,KAAhB;AACAX,EAAAA,QAAQ,CAACc,MAAT,CAAgBC,OAAhB,CAAwB,QAAxB,EAAkCJ,KAAlC;AACAX,EAAAA,QAAQ,CAACW,KAAT,CAAeA,KAAf;AACAX,EAAAA,QAAQ,CAACc,MAAT,CAAgBF,QAAhB;AACAZ,EAAAA,QAAQ,CAACc,MAAT,CAAgBC,OAAhB,CAAwB,UAAxB,EAAoCH,QAApC;AACAZ,EAAAA,QAAQ,CAACc,MAAT,CAAgBD,QAAhB;AACAb,EAAAA,QAAQ,CAACc,MAAT,CAAgBC,OAAhB,CAAwB,UAAxB,EAAoCF,QAApC;AAEA,SAAO,CAAC,YAAY;AAChB,UAAMG,GAAG,GAAG,MAAMlB,IAAI,CAAE,GAAEK,OAAQ,QAAZ,EAAqB;AACvCc,MAAAA,MAAM,EAAE,MAD+B;AAEvCC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF8B;AAGvCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEZ,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBC,QAAAA,KAAjB;AAAwBC,QAAAA,QAAxB;AAAkCC,QAAAA;AAAlC,OAAf;AAHiC,KAArB,CAAtB;AAMA,QAAIG,GAAG,CAACM,MAAJ,KAAe,GAAnB,EAAwB;AAExB,QAAIN,GAAG,CAACM,MAAJ,KAAe,GAAnB,EAAwB,MAAM,IAAIrB,aAAJ,CAAkBmB,IAAI,CAACG,KAAL,CAAWP,GAAG,CAACG,IAAf,EAAqBK,OAAvC,CAAN;AAExB,UAAM,IAAIC,KAAJ,CAAUL,IAAI,CAACG,KAAL,CAAWP,GAAG,CAACG,IAAf,EAAqBK,OAA/B,CAAN;AACH,GAZM,GAAP;AAaH,CA1BD","sourcesContent":["const call = require('../../utils/call')\r\nconst { validate, errors: { ConflictError } } = require('tasks-util')\r\n// const { env: { REACT_APP_API_URL: API_URL } } = process\r\nconst API_URL = process.env.REACT_APP_API_URL\r\n\r\nmodule.exports = function (name, surname, email, username, password) {\r\n    validate.string(name)\r\n    validate.string.notVoid('name', name)\r\n    validate.string(surname)\r\n    validate.string.notVoid('surname', surname)\r\n    validate.string(email)\r\n    validate.string.notVoid('e-mail', email)\r\n    validate.email(email)\r\n    validate.string(username)\r\n    validate.string.notVoid('username', username)\r\n    validate.string(password)\r\n    validate.string.notVoid('password', password)\r\n\r\n    return (async () => {\r\n        const res = await call(`${API_URL}/users`, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ name, surname, email, username, password })\r\n        })\r\n\r\n        if (res.status === 201) return\r\n        \r\n        if (res.status === 409) throw new ConflictError(JSON.parse(res.body).message)\r\n\r\n        throw new Error(JSON.parse(res.body).message)\r\n    })()\r\n}"]},"metadata":{},"sourceType":"module"}