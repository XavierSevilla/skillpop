{"ast":null,"code":"const _require = require('./errors'),\n      ContentError = _require.ContentError;\n\nconst _require2 = require('./validators'),\n      isTypeOf = _require2.isTypeOf,\n      isInstanceOf = _require2.isInstanceOf,\n      isEmail = _require2.isEmail;\n\nconst validate = {\n  typeOf(type, target) {\n    if (!isTypeOf(target, type)) throw new TypeError(`${target} is not a ${type}`);\n  },\n\n  string(target) {\n    this.typeOf('string', target);\n  },\n\n  function(target) {\n    this.typeOf('function', target);\n  },\n\n  number(target) {\n    this.typeOf('number', target);\n  },\n\n  boolean(target) {\n    this.typeOf('boolean', target);\n  },\n\n  instanceOf(type, target) {\n    if (!isInstanceOf(target, type)) throw TypeError(`${target} is not a ${type.name}`);\n  },\n\n  array(target) {\n    this.instanceOf(Array, target);\n  },\n\n  email(target) {\n    if (!isEmail(String(target).toLowerCase())) throw new ContentError(`${target} is not an e-mail`);\n  },\n\n  matches(name, target, ...values) {\n    if (!values.includes(target)) throw new ContentError(`${target} does not match any of the valid ${name} values: ${values}`);\n  }\n\n};\n\nvalidate.string.notVoid = function (name, target) {\n  if (!target.trim().length) throw new ContentError(`${name} is empty or blank`);\n};\n\nmodule.exports = validate;","map":null,"metadata":{},"sourceType":"script"}